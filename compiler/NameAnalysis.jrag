aspect checking {
	public class DeclTable {
		private java.util.Map<IdentWrapper, NameElement> currentElements;
		private java.util.List<java.util.List<NameElement>> elementsForNL;
		
		public DeclTable(){
			currentElements =  new java.util.HashMap<IdentWrapper, NameElement>();
			elementsForNL =  new java.util.ArrayList<java.util.List<NameElement>>();
		}
		
		public void incNL(){
			elementsForNL.add(new java.util.LinkedList<NameElement>());
		}
		
		public void decNL(){
			java.util.List<NameElement> elements = getListForNL();
			for (NameElement nameElement : elements) {
				if(nameElement.getPrevious() != null){
					NameElement previous = nameElement.getPrevious();
					currentElements.put(nameElement.getId(), previous);
				} else {
					currentElements.remove(nameElement.getId());
				}
			}
			elements.clear();
		}
		
		private java.util.List<NameElement> getListForNL(){
			return elementsForNL.get(elementsForNL.size() -1);
		}
		
		public void enter(Decl decl){
			NameElement newElement = new NameElement(decl);
			enter(newElement);
		}
		
		public void enter(MethodDecl decl){
			NameElement newElement = new NameElement(decl);
			enter(newElement);
		}
		
		private void enter(NameElement newElement){
			java.util.List<NameElement> elements = getListForNL();
			if(elements.contains(newElement)){
				throw new IllegalArgumentException();
			} else {
				elements.add(newElement);
				NameElement previous = currentElements.get(newElement.getId());
				newElement.setPrevious(previous);
				currentElements.put(newElement.getId(), newElement);
			}
		}
		
		public Decl lookup(Id id){
			NameElement result = currentElements.get(new IdentWrapper(id));
			if(result == null){
				throw new IllegalArgumentException();
			} else {
				return result.getDeclaration();
			}
		}
		
		
		private static class NameElement{
			private NameElement previous;
			private Decl declaration;
			private IdentWrapper id;
			
			public NameElement(Decl declaration) {
				super();
				this.declaration = declaration;
				this.id = new IdentWrapper(declaration.getIdent());
			}
			
			public NameElement(MethodDecl declaration) {
				super();
				this.declaration = declaration;
				StringBuilder sb = new StringBuilder();
				sb.append(declaration.getIdent().toString());
				for(Param p : declaration.getParamsList()){
					sb.append("_");
					sb.append(p.getT().typeValue());
				}
				this.id = new IdentWrapper(sb.toString());
			}
	
			public NameElement getPrevious() {
				return previous;
			}
	
			public void setPrevious(NameElement previous) {
				this.previous = previous;
			}
	
			public Decl getDeclaration() {
				return declaration;
			}
	
			public IdentWrapper getId() {
				return id;
			}
	
			@Override
			public int hashCode() {
				final int prime = 31;
				int result = 1;
				result = prime * result + ((id == null) ? 0 : id.hashCode());
				return result;
			}
	
			@Override
			public boolean equals(Object obj) {
				if (this == obj)
					return true;
				if (obj == null)
					return false;
				if (getClass() != obj.getClass())
					return false;
				NameElement other = (NameElement) obj;
				if (id == null) {
					if (other.id != null)
						return false;
				} else if (!id.equals(other.id))
					return false;
				return true;
			}
		}
		
		private static class IdentWrapper{
			private String ident;
	
			public IdentWrapper(Id ident){
				this.ident = ident.getIdent();
			}
	
			public IdentWrapper(String ident){
				this.ident = ident;
			}
	
			@Override
			public int hashCode() {
				final int prime = 31;
				int result = 1;
				result = prime * result + ((ident == null) ? 0 : ident.hashCode());
				return result;
			}
	
			@Override
			public boolean equals(Object obj) {
				if (this == obj)
					return true;
				if (obj == null)
					return false;
				if (getClass() != obj.getClass())
					return false;
				IdentWrapper other = (IdentWrapper) obj;
				if (ident == null) {
					if (other.ident != null)
						return false;
				} else if (!ident.equals(other.ident))
					return false;
				return true;
			}
		}
	}
	
	syn lazy DeclTable Program.declTable() {
		return new DeclTable();
	}
	
	public java.util.List<CompilationError> Program.nameCheck() {
		DeclTable t = declTable();
		java.util.List errors = new ArrayList<CompilationError>();
    	errors.addAll(getMain().firstCheck(t));
    	for (ClassDecl cd : getDeclss()) errors.addAll(cd.firstCheck(t));
	    return errors;
	}
	
	public abstract java.util.List<CompilationError> Decl.firstCheck(DeclTable t);
	public java.util.List<CompilationError> MainClass.firstCheck(DeclTable t) {
		java.util.List errors = new ArrayList<CompilationError>();
		t.incNL();
		try{t.enter(this)} catch (IllegalArgumentException e) {errors.add(new CompilationError("MainClass "+e))};  
		errors.addAll(getParamName().firstCheck(t));
		for (VarDecl v : getVariabless()) errors.addAll(v.firstCheck(t));
		for (Statement s : getStatementss()) errors.addAll(s.firstCheck(t));
		t.decNL();
		return errors;
	}
	public java.util.List<CompilationError> ClassDecl.firstCheck(DeclTable t) {
		java.util.List errors = new ArrayList<CompilationError>();
		t.incNL();
		try{t.enter(this)} catch (IllegalArgumentException e) {errors.add(new CompilationError("ClassDecl "+e))};  	
		for (VarDecl f : getVariabless()) errors.addAll(f.firstCheck(t));
		for (MethodDecl m : getMethodss()) errors.addAll(m.firstCheck(t));
		t.decNL();
		return errors;
	}
	
	public java.util.List<CompilationError> MethodDecl.firstCheck(DeclTable t) {
		java.util.List errors = new ArrayList<CompilationError>();
		t.incNL();
		errors.addAll(getT().firstCheck(t));
		try{t.enter(this)} catch (IllegalArgumentException e) {errors.add(new CompilationError("MethodDecl "+e))};
		for (VarDecl v : getVarss()) errors.addAll(v.firstCheck(t));
		for (Statement s : getStatementss()) errors.addAll(s.firstCheck(t));
		errors.addAll(getReturnExp().firstCheck(t));
		return errors;
	}
	public java.util.List<CompilationError> VarDecl.firstCheck(DeclTable t) {
		java.util.List errors = new ArrayList<CompilationError>();
		errors.addAll(getT().firstCheck(t));
		try{t.enter(this)} catch (IllegalArgumentException e) {errors.add(new CompilationError("VarDecl "+e))};
		return errors;
	}
	public java.util.List<CompilationError> Param.firstCheck(DeclTable t){
		java.util.List errors = new ArrayList<CompilationError>();
		errors.addAll(getT().firstCheck(t));
		try{t.enter(this)} catch (IllegalArgumentException e) {errors.add(new CompilationError("Param "+e))};
		return errors;
	}
	
	public abstract java.util.List<CompilationError> Decl.secondCheck(DeclTable t);
	public java.util.List<CompilationError> MainClass.secondCheck(DeclTable t) {
		java.util.List errors = new ArrayList<CompilationError>();
		t.incNL();
		try{t.enter(this)} catch (IllegalArgumentException e) {errors.add(new CompilationError("MainClass "+e))};  
		errors.addAll(getParamName().firstCheck(t));
		for (VarDecl v : getVariabless()) errors.addAll(v.firstCheck(t));
		for (Statement s : getStatementss()) errors.addAll(s.firstCheck(t));
		t.decNL();
		return errors;
	}
	public java.util.List<CompilationError> ClassDecl.secondCheck(DeclTable t) {
		java.util.List errors = new ArrayList<CompilationError>();
		t.incNL();
		try{t.enter(this)} catch (IllegalArgumentException e) {errors.add(new CompilationError("ClassDecl "+e))};  	
		for (VarDecl f : getVariabless()) errors.addAll(f.firstCheck(t));
		for (MethodDecl m : getMethodss()) errors.addAll(m.firstCheck(t));
		t.decNL();
		return errors;
	}
	
	public java.util.List<CompilationError> MethodDecl.secondCheck(DeclTable t) {
		java.util.List errors = new ArrayList<CompilationError>();
		t.incNL();
		errors.addAll(getT().firstCheck(t));
		try{t.enter(this)} catch (IllegalArgumentException e) {errors.add(new CompilationError("MethodDecl "+e))};
		for (VarDecl v : getVarss()) errors.addAll(v.firstCheck(t));
		for (Statement s : getStatementss()) errors.addAll(s.firstCheck(t));
		errors.addAll(getReturnExp().firstCheck(t));
		return errors;
	}
	public java.util.List<CompilationError> VarDecl.secondCheck(DeclTable t) {
		java.util.List errors = new ArrayList<CompilationError>();
		errors.addAll(getT().firstCheck(t));
		try{t.enter(this)} catch (IllegalArgumentException e) {errors.add(new CompilationError("VarDecl "+e))};
		return errors;
	}
	public java.util.List<CompilationError> Param.secondCheck(DeclTable t){
		java.util.List errors = new ArrayList<CompilationError>();
		errors.addAll(getT().firstCheck(t));
		try{t.enter(this)} catch (IllegalArgumentException e) {errors.add(new CompilationError("Param "+e))};
		return errors;
	}
	  
	public abstract java.util.List<CompilationError> Type.secondCheck(DeclTable t);
	public java.util.List<CompilationError> IntArrType.secondCheck(DeclTable t) {
		return new ArrayList<CompilationError>();
	}
	public java.util.List<CompilationError> BooleanType.secondCheck(DeclTable t) {
		return new ArrayList<CompilationError>();
	}
	public java.util.List<CompilationError> IntType.secondCheck(DeclTable t) {
		return new ArrayList<CompilationError>();
	}
	public java.util.List<CompilationError> IdType.secondCheck(DeclTable t) {
		java.util.List errors = return new ArrayList<CompilationError>();
		getIdent().print();
	}
	
	public abstract void Statement.print();
	public void StmList.print() {
	printer().append(indent() + "{");
	for (Statement s : getStatementss()) s.print();
	printer().append(indent() + "}");
	}
	public void Zuweisung.print() {
	printer().append(indent());
	getIdent().print();
	printer().append(" = ");
	getExp().print();
	printer().append(";");
	}
	public void ArrZuw.print() {
	printer().append(indent());
	getIdent().print();
	printer().append("[");
	getPos().print();
	printer().append("] = "); 
	getValue().print();
	printer().append(";");
	}
	public void IfThenElse.print() {
	printer().append(indent() + "if (");
	getIf().print();
	printer().append(")");
	getThen().print();
	printer().append(indent() + "else ");
	getElse().print();
	}
	public void While.print() {
	printer().append(indent() + " while (");
	getBedingung().print();
	printer().append(")");
	getStatement().print();
	}
	public void Syso.print() {
	printer().append(indent() + "System.out.println(");
	getExp().print();
	printer().append(");");
	}
	abstract void Exp.print();
	public void BinOpExp.print(){
	printer().append("(");
	getL().print();
	printer().append(" ");
	getO().print();
	printer().append(" ");
	getR().print();
	printer().append(")");
	}
	public void NotExp.print() {
	printer().append("!(");
	getWert().print();
	printer().append(")");
	}
	public void Geklammert.print() {
	printer().append("(");
	getExpression().print();
	printer().append(")");
	}
	public void IdExp.print() {
	getName().print();
	}  
	public void IntArrExp.print() {
	printer().append("new int[");
	getGroesse().print();
	printer().append("]");
	}  
	public void NewExp.print() {
	printer().append("new ");
	getKlasse().print();
	printer().append("()");
	}  
	public void ArrayExp.print() {
	getFeld().print();
	printer().append("[");
	getPosition().print();
	printer().append("]");
	}  
	public void LengthExp.print() {
	getFeld().print();
	printer().append(".length");
	}  
	public void MethodExp.print() {
	getFeld().print();
	printer().append(".");
	getMethod().print();
	printer().append("(");
	if (getNumParameter() > 0) {
	getParameter(0).print();
	for (int i = 1; i < getNumParameter(); i++) {
	printer().append(", ");
	getParameter(i).print();
	}
	} 
	printer().append(")");
	}  
	public void IntLit.print() {
	printer().append(getWert().toString());
	} 
	public void TrueExp.print() {
	printer().append("true");
	}
	public void FalseExp.print() {
	printer().append("false");
	}
	public void ThisExp.print() {
	printer().append("this");
	}
	  
	public void Id.print(){
	printer().append(getIdent());
	}
	  
	abstract void Op.print();
	public void And.print(){
	printer().append("&&");
	}
	public void Plus.print(){
	printer().append("+");
	}
	public void Minus.print(){
	printer().append("-");
	} 
	public void Mul.print(){
	printer().append("*");
	}
	public void Less.print(){
	printer().append("<");
	}
}
