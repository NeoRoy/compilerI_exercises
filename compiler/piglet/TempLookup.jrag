aspect TempAspect{
	
	syn lazy TempLookup Program.tempLookup() {
		return new TempLookup();
	}
	
	eq Program.getStmts().tempLookup() = this.tempLookup();
	eq Program.getProcs().tempLookup() = this.tempLookup();
	  
	inh lazy TempLookup LabeledStmt.tempLookup();
	inh lazy TempLookup Procedure.tempLookup();
	inh lazy TempLookup Stmt.tempLookup();
	inh lazy TempLookup Exp.tempLookup();
	inh lazy TempLookup Temp.tempLookup();
	inh lazy TempLookup Label.tempLookup();
	
	public class TempLookup{
		
		private int nextFreeNum = 0;
		private java.util.List<Integer> freeInts = new java.util.ArrayList<Integer>();
		private java.util.Map<Integer,Integer> exchangeMap = new java.util.HashMap<Integer,Integer>();
		
		public void leaveScope(){
			freeInts.clear();
			exchangeMap.clear();
			nextFreeNum = 0;
		}
		
		public int getNewTemp(int oldTemp){
			Integer result = exchangeMap.get(oldTemp);
			if(result == null){
				result = getFreeNum();
				exchangeMap.put(oldTemp,result);
			}
			return result;
		}
		
		public int getFreeNum(){
			return freeInts.isEmpty()? nextFreeNum++ : freeInts.remove(0);
		}
		
		public void unblock(int num){
		
		}
		
		public void block(int value){
			if(value >= nextFreeNum){
				for(int i = nextFreeNum ; i < value; i++){
					freeInts.add(i);
				}
				nextFreeNum = value +1;
			} else {
				freeInts.remove(new Integer(value));
			}
		}
	}
}