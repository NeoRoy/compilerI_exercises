abstract Code;
Program:Code 		::= Stmts:LabeledStmt* Procs:Procedure*;

LabeledStmt:Code	::= [Label] Stmt:Stmt;
Procedure:Code		::= Label <Integer:Integer> StmtsRet:StmtExp;

abstract Stmt:Code;
Noop:Stmt;
Err:Stmt;
CJump:Stmt			::= Cond:Exp Label:Label;
Jump:Stmt			::= Label:Label;
HStore:Stmt			::=	Addr:Exp <Offset:Integer> Value:Exp;
HLoad:Stmt			::=	Dest:Temp Addr:Exp <Offset:Integer>;
Move:Stmt			::= Dest:Temp Source:Exp;
Print:Stmt			::= Value:Exp;

abstract Exp:Code;
StmtExp:Exp	 		::= Stmts:LabeledStmt* RetExp:Exp;
Call:Exp			::= Name:Exp Param:Exp*;
HAlloc:Exp	 		::= Size:Exp;
TempExp:Exp	 		::= Temp:Temp;
LabelExp:Exp 		::= Label:Label;

abstract Binop:Exp  ::=	Left:Exp Right:Exp;
Lt:Binop;
Plus:Binop;
Minus:Binop;
Times:Binop;

abstract Literal:Exp;  
IntLiteral:Literal  ::= <Integer:Integer>;

Temp:Code   		::= <Number:Integer>;
Label:Code  		::= <Label>;