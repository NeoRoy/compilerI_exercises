abstract Code		::= <FirstLine>;
Program     :Code   ::= Main:MainClass Decls:ClassDecl*;

abstract Decl :Code	::= Ident:Id;
MainClass   :Decl   ::= ParamName:Id Variables:VarDecl* Statements:Statement*;
ClassDecl   :Decl   ::= [Extends:Id] Variables:VarDecl* Methods:MethodDecl*;
VarDecl     :Decl   ::= T:Type;
MethodDecl  :Decl   ::= T:Type Params:VarDecl* Vars:VarDecl* Statements:Statement* ReturnExp:Exp;

abstract Type :Code;
IntArrType	:Type;
BooleanType	:Type;
IntType		:Type;
IdType		:Type	::= Ident:Id;

abstract Statement :Code;
StmList     :Statement ::= Statements:Statement*;
IfThenElse  :Statement ::= If:Exp Then:Statement Else:Statement;
While       :Statement ::= Bedingung:Exp Statement;
Syso        :Statement ::= Exp;
Zuweisung   :Statement ::= Ident:Id Exp;
ArrZuw      :Statement ::= Ident:Id Pos:Exp Value:Exp;

abstract Exp :Code;
BinOpExp 	:Exp 	::= L:Exp O:Op R:Exp;
ArrayExp 	:Exp 	::= Feld:Exp Position:Exp;
LengthExp 	:Exp	::= Feld:Exp;
MethodExp	:Exp	::= Feld:Exp Method:Id Parameter:Exp*;
TrueExp		:Exp;
FalseExp	:Exp;
IdExp		:Exp	::= Name:Id;
IntLit		:Exp	::= <Wert>;
ThisExp		:Exp;
IntArrExp	:Exp	::= Groesse:Exp;
NewExp		:Exp	::= Klasse:Id;
NotExp		:Exp	::= Wert:Exp;
Geklammert	:Exp	::= Expression:Exp;

Id          :Code   ::= <Ident>;

abstract Op :Code;
And 		:Op;
Plus 		:Op;
Minus 		:Op; 
Mul 		:Op;
Less 		:Op;