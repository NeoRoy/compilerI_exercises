aspect MemoryLookup{
	inh boolean VarDecl.isStack();
	
	eq MainClass.getVariables().isStack() = true;
	eq ClassDecl.Variables().isStack() = false;
	eq MethodDecl.getVars().isStack() = true;
	eq MethodDecl.getParams().isStack() = true;
	
	
	syn lazy MemoryLookup Program.memLookup() {
		return new MemoryLookup();
	}
	eq Program.getMain().memLookup() = this.memLookup();
	eq Program.getDecls().memLookup() = this.memLookup();
	eq Decl.getIdent().memLookup() = this.memLookup();
	  
	inh lazy MemoryLookup Decl.memLookup();
	inh lazy MemoryLookup Statement.memLookup();
	inh lazy MemoryLookup Exp.memLookup();
	inh lazy MemoryLookup Type.memLookup();
	inh lazy MemoryLookup Op.memLookup();
	inh lazy MemoryLookup Id.memLookup();

	public class MemoryLookup{
		//TODO Alles :D
	
		public void openScp(){
		
		}
		
		public void closeScp(){
		
		}
	
		public void enter(VarDecl v){
		
		}
	
		public int lookup(VarDecl v){
			return 0;
		}
		
		public int getFreeTemp(){
			return 0;
		}
		
		public void unblockTemp(int i){
		
		}
		
		public void blockTemp(int i){
		
		}
	
	}

}